{"ast":null,"code":"var _jsxFileName = \"/home/pranavas11/Documents/React-App/my-app/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('accessToken'));\n  const [userName, setUserName] = useState(localStorage.getItem('userName') || '');\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (localStorage.getItem('userName')) {\n      setUserName(localStorage.getItem('userName'));\n    }\n  }, []);\n  const signup = async (name, email, password) => {\n    try {\n      const response = await axios.post('http://localhost:8080/signup', {\n        userName: name,\n        userEmail: email,\n        userPassword: password\n      });\n      localStorage.setItem('accessToken', response.data.accessToken);\n      localStorage.setItem('userName', name);\n      setIsAuthenticated(true);\n      setUserName(name);\n      navigate('/home');\n    } catch (error) {\n      var _error$response;\n      console.error(\"Signup failed:\", error);\n      //throw new Error(\"Signup failed\");\n      const statusCode = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) || 500;\n      //console.log(statusCode);\n      return statusCode;\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post('http://localhost:8080/authenticate', {\n        userEmail: email,\n        userPassword: password\n      });\n      const name = response.data.userName;\n      //console.log(name);\n      localStorage.setItem('accessToken', response.data.token);\n      //localStorage.setItem('userName', response.data.userName);\n      setIsAuthenticated(true);\n      //console.log(isAuthenticated);\n      localStorage.setItem('userName', name);\n      setUserName(name);\n\n      // Fetch user profile to get the user name\n      const profileResponse = await axios.get(`http://localhost:8080/profile?${email}`, {\n        headers: {\n          \"Authorization\": `Bearer ${response.data.token}`\n        } // response.data.accessToken\n      });\n      console.log(\"The profile response in auth context is: \", profileResponse);\n\n      /*localStorage.setItem('userName', profileResponse.data.userName);\n      setUserName(response.data.userName);\n      console.log(localStorage.getItem('userName'));\n      console.log(userName);*/\n\n      //navigate('/home');\n      console.log(\"the response is: \", response.status);\n      const status = response.status;\n      return status;\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Login failed:\", error);\n      const statusCode = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) || 500;\n      console.log(statusCode);\n      return statusCode;\n      //throw new Error(\"Invalid credentials\");\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('userName');\n    setIsAuthenticated(false);\n    setUserName('');\n    navigate('/login');\n  };\n  const value = {\n    isAuthenticated,\n    userName,\n    signup,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n\n/*import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(() => {\n        return localStorage.getItem('isAuthenticated') === 'true';\n    });\n    const navigate = useNavigate();\n\n    const login = () => {\n        setIsAuthenticated(true);\n        localStorage.setItem('isAuthenticated', 'true');\n        navigate('/home');\n    };\n\n    const logout = () => {\n        setIsAuthenticated(false);\n        localStorage.removeItem('isAuthenticated');\n        navigate('/login');\n    };\n\n    useEffect(() => {\n        if (isAuthenticated) {\n            navigate('/home');\n        }\n    }, [isAuthenticated, navigate]);\n\n    return (\n        <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => useContext(AuthContext);*/\n\n/*import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const navigate = useNavigate();\n\n    const login = () => {\n        setIsAuthenticated(true);\n        localStorage.setItem('isAuthenticated', 'true');\n        navigate('/home');\n    };\n\n    const logout = () => {\n        setIsAuthenticated(false);\n        localStorage.removeItem('isAuthenticated');\n        navigate('/login');\n    };\n\n    useEffect(() => {\n        // check if the user is already logged in\n        const storedAuth = localStorage.getItem('isAuthenticated');\n        if (storedAuth === 'true') {\n            setIsAuthenticated(true);\n        }\n    }, []);\n\n    return (\n        <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n*/\n_s2(AuthProvider, \"mfVFCxjzBPzgidvR7IpdUULpCfM=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","useNavigate","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","localStorage","getItem","userName","setUserName","navigate","signup","name","email","password","response","post","userEmail","userPassword","setItem","data","accessToken","error","_error$response","console","statusCode","status","login","token","profileResponse","get","headers","log","_error$response2","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/pranavas11/Documents/React-App/my-app/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\nconst AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('accessToken'));\n  const [userName, setUserName] = useState(localStorage.getItem('userName') || '');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (localStorage.getItem('userName')) {\n      setUserName(localStorage.getItem('userName'));\n    }\n  }, []);\n\n  const signup = async (name, email, password) => {\n    try {\n      const response = await axios.post('http://localhost:8080/signup', {\n        userName: name,\n        userEmail: email,\n        userPassword: password,\n      });\n      localStorage.setItem('accessToken', response.data.accessToken);\n      localStorage.setItem('userName', name);\n      setIsAuthenticated(true);\n      setUserName(name);\n      navigate('/home');\n    } catch (error) {\n      console.error(\"Signup failed:\", error);\n      //throw new Error(\"Signup failed\");\n      const statusCode = error.response?.status || 500;\n      //console.log(statusCode);\n      return statusCode;\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n        const response = await axios.post('http://localhost:8080/authenticate', {\n            userEmail: email,\n            userPassword: password\n        });\n        const name = response.data.userName;\n        //console.log(name);\n        localStorage.setItem('accessToken', response.data.token);\n        //localStorage.setItem('userName', response.data.userName);\n        setIsAuthenticated(true);\n        //console.log(isAuthenticated);\n        localStorage.setItem('userName', name);\n        setUserName(name);\n\n        // Fetch user profile to get the user name\n        const profileResponse = await axios.get(`http://localhost:8080/profile?${email}`, {\n            headers: { \"Authorization\": `Bearer ${response.data.token}` }   // response.data.accessToken\n        });\n\n        console.log(\"The profile response in auth context is: \", profileResponse);\n\n        /*localStorage.setItem('userName', profileResponse.data.userName);\n        setUserName(response.data.userName);\n        console.log(localStorage.getItem('userName'));\n        console.log(userName);*/\n\n        //navigate('/home');\n        console.log(\"the response is: \", response.status);\n        const status = response.status;\n        return status;\n    } catch (error) {\n        console.error(\"Login failed:\", error);\n        const statusCode = error.response?.status || 500;\n        console.log(statusCode);\n        return statusCode;\n        //throw new Error(\"Invalid credentials\");\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('userName');\n    setIsAuthenticated(false);\n    setUserName('');\n    navigate('/login');\n  };\n\n  const value = {\n    isAuthenticated,\n    userName,\n    signup,\n    login,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\n\n\n\n\n/*import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(() => {\n        return localStorage.getItem('isAuthenticated') === 'true';\n    });\n    const navigate = useNavigate();\n\n    const login = () => {\n        setIsAuthenticated(true);\n        localStorage.setItem('isAuthenticated', 'true');\n        navigate('/home');\n    };\n\n    const logout = () => {\n        setIsAuthenticated(false);\n        localStorage.removeItem('isAuthenticated');\n        navigate('/login');\n    };\n\n    useEffect(() => {\n        if (isAuthenticated) {\n            navigate('/home');\n        }\n    }, [isAuthenticated, navigate]);\n\n    return (\n        <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => useContext(AuthContext);*/\n\n\n\n\n\n\n\n/*import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const navigate = useNavigate();\n\n    const login = () => {\n        setIsAuthenticated(true);\n        localStorage.setItem('isAuthenticated', 'true');\n        navigate('/home');\n    };\n\n    const logout = () => {\n        setIsAuthenticated(false);\n        localStorage.removeItem('isAuthenticated');\n        navigate('/login');\n    };\n\n    useEffect(() => {\n        // check if the user is already logged in\n        const storedAuth = localStorage.getItem('isAuthenticated');\n        if (storedAuth === 'true') {\n            setIsAuthenticated(true);\n        }\n    }, []);\n\n    return (\n        <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n*/"],"mappings":"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AAgBP,MAAM,KAAI,GAAG;MAChDF,OAAO,CAACQ,GAAG,CAACP,UAAU,CAAC;MACvB,OAAOA,UAAU;MACjB;IACJ;EACF,CAAC;EAED,MAAMS,MAAM,GAAGA,CAAA,KAAM;IACnB5B,YAAY,CAAC6B,UAAU,CAAC,aAAa,CAAC;IACtC7B,YAAY,CAAC6B,UAAU,CAAC,UAAU,CAAC;IACnC9B,kBAAkB,CAAC,KAAK,CAAC;IACzBI,WAAW,CAAC,EAAE,CAAC;IACfC,QAAQ,CAAC,QAAQ,CAAC;EACpB,CAAC;EAED,MAAM0B,KAAK,GAAG;IACZhC,eAAe;IACfI,QAAQ;IACRG,MAAM;IACNgB,KAAK;IACLO;EACF,CAAC;EAED,oBACErC,OAAA,CAACC,WAAW,CAACuC,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAlC,QAAA,EAChCA;EAAQ;IAAAoC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArCAtC,GAAA,CA/IgBF,YAAY;EAAA,QAGTN,WAAW;AAAA;AAAA+C,EAAA,GAHdzC,YAAY;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}