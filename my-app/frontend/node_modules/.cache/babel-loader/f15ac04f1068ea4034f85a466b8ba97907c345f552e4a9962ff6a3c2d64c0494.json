{"ast":null,"code":"var _jsxFileName = \"/home/pranavas11/Documents/React-App/my-app/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function useAuth() {\n  _s();\n  return useContext(AuthContext);\n}\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('accessToken'));\n  const navigate = useNavigate();\n  const signup = async (name, email, password) => {\n    try {\n      const response = await axios.post('http://localhost:8080/signup', {\n        userName: name,\n        userEmail: email,\n        userPassword: password\n      });\n      console.log(response);\n      // Automatically log in the user after signup\n      //await login(email, password);\n      localStorage.setItem('accessToken', response.data.accessToken);\n      setIsAuthenticated(true);\n      navigate('/home');\n    } catch (error) {\n      console.error(\"Signup failed:\", error);\n      throw new Error(\"Signup failed\");\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post('http://localhost:8080/authenticate', {\n        email,\n        password\n      });\n      localStorage.setItem('accessToken', response.data.accessToken);\n      setIsAuthenticated(true);\n      navigate('/home');\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw new Error(\"Invalid credentials\");\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('accessToken');\n    setIsAuthenticated(false);\n    navigate('/login');\n  };\n  const value = {\n    isAuthenticated,\n    signup,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n/*import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(() => {\n        return localStorage.getItem('isAuthenticated') === 'true';\n    });\n    const navigate = useNavigate();\n\n    const login = () => {\n        setIsAuthenticated(true);\n        localStorage.setItem('isAuthenticated', 'true');\n        navigate('/home');\n    };\n\n    const logout = () => {\n        setIsAuthenticated(false);\n        localStorage.removeItem('isAuthenticated');\n        navigate('/login');\n    };\n\n    useEffect(() => {\n        if (isAuthenticated) {\n            navigate('/home');\n        }\n    }, [isAuthenticated, navigate]);\n\n    return (\n        <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => useContext(AuthContext);*/\n\n/*import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const navigate = useNavigate();\n\n    const login = () => {\n        setIsAuthenticated(true);\n        localStorage.setItem('isAuthenticated', 'true');\n        navigate('/home');\n    };\n\n    const logout = () => {\n        setIsAuthenticated(false);\n        localStorage.removeItem('isAuthenticated');\n        navigate('/login');\n    };\n\n    useEffect(() => {\n        // check if the user is already logged in\n        const storedAuth = localStorage.getItem('isAuthenticated');\n        if (storedAuth === 'true') {\n            setIsAuthenticated(true);\n        }\n    }, []);\n\n    return (\n        <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n*/\n_s2(AuthProvider, \"9DRUL9OL/3HXH9BtC/ghwItWuAI=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","axios","useNavigate","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","localStorage","getItem","navigate","signup","name","email","password","response","post","userName","userEmail","userPassword","console","log","setItem","data","accessToken","error","Error","login","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/pranavas11/Documents/React-App/my-app/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\nconst AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n\nexport function AuthProvider({ children }) {\n  const [isAuthenticated, setIsAuthenticated] = useState(!!localStorage.getItem('accessToken'));\n  const navigate = useNavigate();\n\n  const signup = async (name, email, password) => {\n    try {\n      const response = await axios.post('http://localhost:8080/signup', {\n        userName: name,\n        userEmail: email,\n        userPassword: password,\n      });\n      console.log(response);\n      // Automatically log in the user after signup\n      //await login(email, password);\n      localStorage.setItem('accessToken', response.data.accessToken);\n      setIsAuthenticated(true);\n      navigate('/home');\n    } catch (error) {\n      console.error(\"Signup failed:\", error);\n      throw new Error(\"Signup failed\");\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post('http://localhost:8080/authenticate', { email, password });\n      localStorage.setItem('accessToken', response.data.accessToken);\n      setIsAuthenticated(true);\n      navigate('/home');\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      throw new Error(\"Invalid credentials\");\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('accessToken');\n    setIsAuthenticated(false);\n    navigate('/login');\n  };\n\n  const value = {\n    isAuthenticated,\n    signup,\n    login,\n    logout\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\n\n\n\n\n/*import React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(() => {\n        return localStorage.getItem('isAuthenticated') === 'true';\n    });\n    const navigate = useNavigate();\n\n    const login = () => {\n        setIsAuthenticated(true);\n        localStorage.setItem('isAuthenticated', 'true');\n        navigate('/home');\n    };\n\n    const logout = () => {\n        setIsAuthenticated(false);\n        localStorage.removeItem('isAuthenticated');\n        navigate('/login');\n    };\n\n    useEffect(() => {\n        if (isAuthenticated) {\n            navigate('/home');\n        }\n    }, [isAuthenticated, navigate]);\n\n    return (\n        <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => useContext(AuthContext);*/\n\n\n\n\n\n\n\n/*import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n    const navigate = useNavigate();\n\n    const login = () => {\n        setIsAuthenticated(true);\n        localStorage.setItem('isAuthenticated', 'true');\n        navigate('/home');\n    };\n\n    const logout = () => {\n        setIsAuthenticated(false);\n        localStorage.removeItem('isAuthenticated');\n        navigate('/login');\n    };\n\n    useEffect(() => {\n        // check if the user is already logged in\n        const storedAuth = localStorage.getItem('isAuthenticated');\n        if (storedAuth === 'true') {\n            setIsAuthenticated(true);\n        }\n    }, []);\n\n    return (\n        <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\n            {children}\n        </AuthContext.Provider>\n    );\n};\n\nexport const useAuth = () => useContext(AuthContext);\n*/"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}